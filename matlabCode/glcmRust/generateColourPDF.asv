%Calculate PDF of the property values from the constructed model
%glcmProperties(channel).properties
%model(material,channel,glcmProperties).std and .mean
%pdfData(material,channel,glcmProperties).Val
function overallProbPercent = generateColourPDF(imageSample,model)
%Get the average normalised values of the sample image
normalisedImage = normaliseImage(imageSample);
averageR = sum(sum(normalisedImage(:,:,1)))/(size(normalisedImage,1)*size(normalisedImage,2));
averageG = sum(sum(normalisedImage(:,:,2)))/(size(normalisedImage,1)*size(normalisedImage,2));
averageB = sum(sum(normalisedImage(:,:,3)))/(size(normalisedImage,1)*size(normalisedImage,2));

for curr_mat = 1:size(model,1)
    pdfData(curr_mat,1) = normpdf(averageR, model(curr_mat).Rmean, model(curr_mat).Rstd);
    pdfData(curr_mat,2) = normpdf(averageG, model(curr_mat).Gmean, model(curr_mat).Gstd);
    pdfData(curr_mat,3) = normpdf(averageB, model(curr_mat).Bmean, model(curr_mat).Bstd);
end


%Working out the overall probability, first arrange it into a list for
%easier calculation
for curr_mat = 1:size(pdfData,1)
    counter = 1;
    for curr_property = 1:size(pdfData,3)
        for curr_channel = 1:size(pdfData,2)
            pdfList(curr_mat,counter) = pdfData(curr_mat,curr_channel,curr_property); 
            counter = counter + 1;
        end
    end
end

%Multiple all the probabilities together for each material type
for curr_mat=1:size(pdfList,1)
    for i=2:size(pdfList,2)
        if i == 2
            overallProb(curr_mat) = pdfList(curr_mat,i-1)*pdfList(curr_mat,i);            
        else
            overallProb(curr_mat) = overallProb(curr_mat)*pdfList(curr_mat,i); 
        end
    end
end
%Normalise the overallProb and make into percentage
for i=1:size(overallProb,2)
    overallProbPercent(i) = overallProb(i)/sum(overallProb)*100;
end
