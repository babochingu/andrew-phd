#ifdef _CH_
#pragma package <opencv>
#endif


#include "stdafx.h"
#include "cv.h"
#include "highgui.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <math.h>
#include <float.h>
#include <limits.h>
#include <time.h>
#include <ctype.h>
#include <svm.h>

#ifdef _EiC
#define WIN32
#endif

void predictionAndDrawing( IplImage* img );

//variables
IplImage* image = 0;
IplImage* result = 0;
IplImage* class1 = 0;
IplImage* class2 = 0;


int main( int argc, char** argv )
{	
   //load the images
	char* filename1 = argc >= 2 ? argv[1] : (char*)"wallPhoto.jpg";
	char* filename2 = argc >= 2 ? argv[1] : (char*)"class1.jpg";
	char* filename3 = argc >= 2 ? argv[1] : (char*)"class2.jpg";
	image = cvLoadImage(filename1,1);		
	result = cvLoadImage(filename1,1);
	class1 = cvLoadImage(filename2,1);
	class2 = cvLoadImage(filename3,1);
	cvNamedWindow( "image", 1 );
	cvNamedWindow( "result", 1 );

	//Build the training datafile assume class1 and class2 image have same attributes
	int height = class1->height;
	int width = class1->width;
	int step = class1->widthStep;
	int channels = class1->nChannels; 
	uchar *dataClass1,*dataClass2;
	dataClass1 = (uchar *)class1->imageData;
	dataClass2 = (uchar *)class2->imageData;

	FILE * pFile;
	double r1,g1,b1,r2,g2,b2;	
	pFile = fopen ("dataFile","wb");
	//Loop that runs through all the pixels in the image and saves it to file
	for(int i=0;i < (height);i++) for(int j=0;j <(width);j++)   
		{
			r1 = (double)dataClass1[i*step+j*channels+2]/255;			
			g1 = (double)dataClass1[i*step+j*channels+1]/255;
			b1 = (double)dataClass1[i*step+j*channels]/255;

			r2 = (double)dataClass2[i*step+j*channels+2]/255;
			g2 = (double)dataClass2[i*step+j*channels+1]/255;
			b2 = (double)dataClass2[i*step+j*channels]/255;
			fprintf (pFile, "1 1:%g 2:%g 3:%g \n",r1,g1,b1); 
			fprintf (pFile, "-1 1:%g 2:%g 3:%g \n",r2,g2,b2);
		}	
	fclose (pFile);

	////scale the training data
	//system("c:\svm-scale dataFile>dataFileScaled");
	////build the model with the training data
	system("C:\svm-train dataFile");
	//svm_model *model = svm_train(pFile);


	//Build the video capture
	CvCapture* capture = 0;
    IplImage *frame, *frame_copy = 0;
	const char* input_name;
	input_name = argc > 1 ? argv[1] : 0;
	if( !input_name || (isdigit(input_name[0]) && input_name[1] == '\0') )
        capture = cvCaptureFromCAM( !input_name ? 0 : input_name[0] - '0' );
    else
        capture = cvCaptureFromAVI( input_name );

	if( capture )
    {
        for(;;)
        {
            if( !cvGrabFrame( capture ))
                break;
            frame = cvRetrieveFrame( capture );
            if( !frame )
                break;
            if( !frame_copy )
                frame_copy = cvCreateImage( cvSize(frame->width,frame->height),
                                            IPL_DEPTH_8U, frame->nChannels );
            if( frame->origin == IPL_ORIGIN_TL )
                cvCopy( frame, frame_copy, 0 );
            else
                cvFlip( frame, frame_copy, 0 );
            
            predictionAndDrawing( frame_copy );
			//histogramCreation(frame_copy);

            if( cvWaitKey( 10 ) >= 0 )
                break;
        }
        cvReleaseImage( &frame_copy );
        cvReleaseCapture( &capture );
    }
		
	cvWaitKey(0);
	return 0;
}

void predictionAndDrawing( IplImage* img )
{
	cvShowImage("image",img);
	//Build the testing dataset
	uchar *testingData;
	int height = img->height;
	int width = img->width;
	int step = img->widthStep;
	int channels = img->nChannels;
	double r,g,b;
	testingData = (uchar *)img->imageData;
	FILE * pFile;
	//pFile = fopen ("testingData","wb");
	////Loop that runs through all the pixels in the image and saves it to file
	//for(int i=0;i < (height);i++) for(int j=0;j <(width);j++)   
	//	{
	//		r = testingData[i*step+j*channels+2]/255;			
	//		g = testingData[i*step+j*channels+1]/255;
	//		b = testingData[i*step+j*channels]/255;
	//		fprintf (pFile, "1 1:%g 2:%g 3:%g \n",r,g,b); 		
	//	}	
	//fclose (pFile);
	svm_predict(
	//scale the training data	
	//system("C:\svm-scale testingData>testingDataScaled");
	//Peform prediction on the testing data using the model
	//system("C:\svm-predict testingData dataFile.model resultsFile");
	//Generate a graphical result
	//FILE *resultsFile; 
	//resultsFile = fopen("resultsFile","r");	
	//if (resultsFile==NULL) perror ("Error opening file");
	//int f;
	//for(int i=0;i < (height);i++) for(int j=0;j <(width);j++)   
	//	{
	//		fscanf (resultsFile, "%d", &f);
	//		if(f==1)
	//		{
	//			testingData[i*step+j*channels]=255;
	//			testingData[i*step+j*channels+1]=255;
	//			testingData[i*step+j*channels+2]=255;
	//		}
	//		else
	//		{
	//			testingData[i*step+j*channels]=0;
	//			testingData[i*step+j*channels+1]=0;
	//			testingData[i*step+j*channels+2]=0;
	//		}			
	//	}
	cvShowImage("result",img);	
}
				


